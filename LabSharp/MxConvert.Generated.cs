/*
 * Lab# - Matlab interaction library for .Net
 * 
 * Copyright (C) 2005 Julien Roncaglia
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/*
 * THIS CODE IS GENERATED BY MxConvert.xsl FROM MxConvert.xml, 
 * DO NOT EDIT DIRECTLY.
 */
using System;
using System.Collections.Generic;
using System.Text;

namespace LabSharp
{
    public static partial class MxConvert
    {
        const string ONE_ELEMENT_REQUIRED = "A mxArray with only 1 element is required.";
        const string NO_WAY_TO_CAST = "Cannot cast a {0} mxArray to {1}.";
        const string NO_DOTNET_TYPE = "No corresponding .Net type exists for {0}.";

        /// <summary>
        /// Convert a mxArray to the corresponding type of array.
        /// </summary>
        /// </remarks>
        /// No conversion of type occurs, if the ClassID is Single, a float[] will be
        /// returned and never a double[].
        /// </remarks>
        static Array _ConvertToArray(MxArray array, ClassID classId, int ndims)
        {
            switch (classId)
            {
                
                case ClassID.Char:
                    return _ToCharArray(array);

                case ClassID.Logical:
                    return _ToBooleanArray(array);

                case ClassID.Int8:
                    return _ToSByteArray(array);

                case ClassID.UInt8:
                    return _ToByteArray(array);

                case ClassID.UInt16:
                    return _ToUInt16Array(array);

                case ClassID.Int16:
                    return _ToInt16Array(array);

                case ClassID.UInt32:
                    return _ToUInt32Array(array);

                case ClassID.Int32:
                    return _ToInt32Array(array);

                case ClassID.UInt64:
                    return _ToUInt64Array(array);

                case ClassID.Int64:
                    return _ToInt64Array(array);

                case ClassID.Single:
                    return _ToSingleArray(array);

                case ClassID.Double:
                    return _ToDoubleArray(array);

                default:
                    throw new InvalidCastException(string.Format(NO_DOTNET_TYPE, classId));
            }
        }

        /// <summary>
        /// Convert a mxArray to the corresponding basic object (Not an array).
        /// </summary>
        /// </remarks>
        /// No conversion of type occurs, if the ClassID is Single, a float will be
        /// returned and never a double.
        /// </remarks>        
        static Object _ConvertToBasicType(MxArray array, ClassID classId)
        {
            switch(classId)
            {
                
                case ClassID.Char:
                    return _ToChar(array);

                case ClassID.Logical:
                    return _ToBoolean(array);

                case ClassID.Int8:
                    return _ToSByte(array);

                case ClassID.UInt8:
                    return _ToByte(array);

                case ClassID.UInt16:
                    return _ToUInt16(array);

                case ClassID.Int16:
                    return _ToInt16(array);

                case ClassID.UInt32:
                    return _ToUInt32(array);

                case ClassID.Int32:
                    return _ToInt32(array);

                case ClassID.UInt64:
                    return _ToUInt64(array);

                case ClassID.Int64:
                    return _ToInt64(array);

                case ClassID.Single:
                    return _ToSingle(array);

                case ClassID.Double:
                    return _ToDouble(array);

                default:
                    throw new InvalidCastException(string.Format(NO_DOTNET_TYPE, classId));
            }
        }

        /// <summary>
        /// Try to convert a mxArray a specified .Net type.
        /// </summary>
        /// </remarks>
        /// <para>
        ///     A conversion could occurs, if you ask for a double[,] but the content is
        ///     a 2 dimensions mxArray of Single it will be converted to a double[,].
        /// </para>
        /// </remarks>        
        /// <param name="noVectorization">
        /// If this parametter is true and the user ask for a 1D array an exception will 
        /// be thrown if the mxArray isn't of dimension 1, otherwise it will vectorize the array.
        /// </param>
        static TType _ConvertToSomeType<TType>(MxArray array, ClassID classId, int ndims, bool noVectorization)
        {
            Type genericType = typeof(TType);
            // There is two sorts of Array types : the ones that answer true to IsArray, where we could
            // get dimensions, element type and other details; and the Array class that could contain
            // any array.
            bool isArray = genericType.IsArray;
            Type arrayElementType = genericType.GetElementType();

            
    if (genericType == typeof(char))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToChar(array);
    }
    else if(arrayElementType == typeof(char))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToCharArray1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToCharArray(array);
        }
    }
    else

    if (genericType == typeof(bool))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToBoolean(array);
    }
    else if(arrayElementType == typeof(bool))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToBooleanArray1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToBooleanArray(array);
        }
    }
    else

    if (genericType == typeof(sbyte))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToSByte(array);
    }
    else if(arrayElementType == typeof(sbyte))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToSByteArray1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToSByteArray(array);
        }
    }
    else

    if (genericType == typeof(byte))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToByte(array);
    }
    else if(arrayElementType == typeof(byte))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToByteArray1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToByteArray(array);
        }
    }
    else

    if (genericType == typeof(ushort))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToUInt16(array);
    }
    else if(arrayElementType == typeof(ushort))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToUInt16Array1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToUInt16Array(array);
        }
    }
    else

    if (genericType == typeof(short))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToInt16(array);
    }
    else if(arrayElementType == typeof(short))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToInt16Array1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToInt16Array(array);
        }
    }
    else

    if (genericType == typeof(uint))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToUInt32(array);
    }
    else if(arrayElementType == typeof(uint))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToUInt32Array1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToUInt32Array(array);
        }
    }
    else

    if (genericType == typeof(int))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToInt32(array);
    }
    else if(arrayElementType == typeof(int))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToInt32Array1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToInt32Array(array);
        }
    }
    else

    if (genericType == typeof(ulong))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToUInt64(array);
    }
    else if(arrayElementType == typeof(ulong))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToUInt64Array1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToUInt64Array(array);
        }
    }
    else

    if (genericType == typeof(long))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToInt64(array);
    }
    else if(arrayElementType == typeof(long))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToInt64Array1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToInt64Array(array);
        }
    }
    else

    if (genericType == typeof(float))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToSingle(array);
    }
    else if(arrayElementType == typeof(float))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToSingleArray1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToSingleArray(array);
        }
    }
    else

    if (genericType == typeof(double))
    {
        // If the user want to convert to a single element
        return (TType)(Object)_ToDouble(array);
    }
    else if(arrayElementType == typeof(double))
    {
        // If the user want to convert to an array of this element
        int rank = genericType.GetArrayRank();

        if ( (rank == 1) && (!noVectorization) )
        {
            return (TType)(Object)_ToDoubleArray1D(array);
        }
        else
        {
            if (rank != ndims)
            {
                throw new InvalidCastException(string.Format(
                    "The mxArray have {0} dimensions but the result have {1}, no way to convert", ndims, rank));
            }
            return (TType)(Object)_ToDoubleArray(array);
        }
    }
    else

                throw new InvalidCastException(string.Format(NO_WAY_TO_CAST, classId, typeof(TType).Name));
        }

        
        #region Convert to Char
        
        public unsafe static char _ToChar(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.Char :
                {
                    char* p;
                    p = (char*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "char"));
            }
        }
        
        public unsafe static char[] _ToCharArray1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		char[] result = new char[count];
        		
            switch(classId)
            {
                
                case ClassID.Char :
                {
                    char* p;
                    p = (char*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "char"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToCharArray(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(char), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.Char :
                {
                    char* p;
                    p = (char*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "char"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to Boolean
        
        public unsafe static bool _ToBoolean(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.Logical :
                {
                    bool* p;
                    p = (bool*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "bool"));
            }
        }
        
        public unsafe static bool[] _ToBooleanArray1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		bool[] result = new bool[count];
        		
            switch(classId)
            {
                
                case ClassID.Logical :
                {
                    bool* p;
                    p = (bool*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "bool"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToBooleanArray(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(bool), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.Logical :
                {
                    bool* p;
                    p = (bool*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "bool"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to SByte
        
        public unsafe static sbyte _ToSByte(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "sbyte"));
            }
        }
        
        public unsafe static sbyte[] _ToSByteArray1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		sbyte[] result = new sbyte[count];
        		
            switch(classId)
            {
                
                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "sbyte"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToSByteArray(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(sbyte), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "sbyte"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to Byte
        
        public unsafe static byte _ToByte(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "byte"));
            }
        }
        
        public unsafe static byte[] _ToByteArray1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		byte[] result = new byte[count];
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "byte"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToByteArray(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(byte), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "byte"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to UInt16
        
        public unsafe static ushort _ToUInt16(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    
                    return (ushort)(*p);
                    
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    
                    return (ushort)(*p);
                    
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "ushort"));
            }
        }
        
        public unsafe static ushort[] _ToUInt16Array1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		ushort[] result = new ushort[count];
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (ushort)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (ushort)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "ushort"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToUInt16Array(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(ushort), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((ushort)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((ushort)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "ushort"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to Int16
        
        public unsafe static short _ToInt16(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    
                    return (short)(*p);
                    
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    
                    return (short)(*p);
                    
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "short"));
            }
        }
        
        public unsafe static short[] _ToInt16Array1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		short[] result = new short[count];
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (short)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (short)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "short"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToInt16Array(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(short), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((short)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((short)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "short"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to UInt32
        
        public unsafe static uint _ToUInt32(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    
                    return (uint)(*p);
                    
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    
                    return (uint)(*p);
                    
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    
                    return (uint)(*p);
                    
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    
                    return (uint)(*p);
                    
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "uint"));
            }
        }
        
        public unsafe static uint[] _ToUInt32Array1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		uint[] result = new uint[count];
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (uint)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (uint)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (uint)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (uint)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "uint"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToUInt32Array(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(uint), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((uint)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((uint)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((uint)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((uint)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "uint"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to Int32
        
        public unsafe static int _ToInt32(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    
                    return (int)(*p);
                    
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    
                    return (int)(*p);
                    
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    
                    return (int)(*p);
                    
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    
                    return (int)(*p);
                    
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "int"));
            }
        }
        
        public unsafe static int[] _ToInt32Array1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		int[] result = new int[count];
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (int)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (int)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (int)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (int)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "int"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToInt32Array(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(int), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((int)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((int)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((int)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((int)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "int"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to UInt64
        
        public unsafe static ulong _ToUInt64(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    
                    return (ulong)(*p);
                    
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    
                    return (ulong)(*p);
                    
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    
                    return (ulong)(*p);
                    
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    
                    return (ulong)(*p);
                    
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    
                    return (ulong)(*p);
                    
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    
                    return (ulong)(*p);
                    
                }

                case ClassID.UInt64 :
                {
                    ulong* p;
                    p = (ulong*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "ulong"));
            }
        }
        
        public unsafe static ulong[] _ToUInt64Array1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		ulong[] result = new ulong[count];
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (ulong)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (ulong)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (ulong)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (ulong)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (ulong)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (ulong)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt64 :
                {
                    ulong* p;
                    p = (ulong*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "ulong"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToUInt64Array(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(ulong), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((ulong)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((ulong)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((ulong)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((ulong)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((ulong)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((ulong)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt64 :
                {
                    ulong* p;
                    p = (ulong*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "ulong"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to Int64
        
        public unsafe static long _ToInt64(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    
                    return (long)(*p);
                    
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    
                    return (long)(*p);
                    
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    
                    return (long)(*p);
                    
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    
                    return (long)(*p);
                    
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    
                    return (long)(*p);
                    
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    
                    return (long)(*p);
                    
                }

                case ClassID.Int64 :
                {
                    long* p;
                    p = (long*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "long"));
            }
        }
        
        public unsafe static long[] _ToInt64Array1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		long[] result = new long[count];
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (long)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (long)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (long)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (long)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (long)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (long)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int64 :
                {
                    long* p;
                    p = (long*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "long"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToInt64Array(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(long), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((long)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((long)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((long)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((long)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((long)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((long)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int64 :
                {
                    long* p;
                    p = (long*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "long"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to Single
        
        public unsafe static float _ToSingle(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    
                    return (float)(*p);
                    
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    
                    return (float)(*p);
                    
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    
                    return (float)(*p);
                    
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    
                    return (float)(*p);
                    
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    
                    return (float)(*p);
                    
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    
                    return (float)(*p);
                    
                }

                case ClassID.UInt64 :
                {
                    ulong* p;
                    p = (ulong*)array.RealElements;
                    
                    return (float)(*p);
                    
                }

                case ClassID.Int64 :
                {
                    long* p;
                    p = (long*)array.RealElements;
                    
                    return (float)(*p);
                    
                }

                case ClassID.Single :
                {
                    float* p;
                    p = (float*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "float"));
            }
        }
        
        public unsafe static float[] _ToSingleArray1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		float[] result = new float[count];
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (float)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (float)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (float)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (float)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (float)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (float)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt64 :
                {
                    ulong* p;
                    p = (ulong*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (float)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int64 :
                {
                    long* p;
                    p = (long*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (float)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Single :
                {
                    float* p;
                    p = (float*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "float"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToSingleArray(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(float), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((float)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((float)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((float)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((float)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((float)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((float)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt64 :
                {
                    ulong* p;
                    p = (ulong*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((float)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int64 :
                {
                    long* p;
                    p = (long*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((float)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Single :
                {
                    float* p;
                    p = (float*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "float"));
            }
            
            return result;
        }
        
        #endregion

        #region Convert to Double
        
        public unsafe static double _ToDouble(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            if (array.NumberOfElements != 1)
                throw new InvalidCastException(ONE_ELEMENT_REQUIRED);
            ClassID classId = array.Class;
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    
                    return (double)(*p);
                    
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    
                    return (double)(*p);
                    
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    
                    return (double)(*p);
                    
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    
                    return (double)(*p);
                    
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    
                    return (double)(*p);
                    
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    
                    return (double)(*p);
                    
                }

                case ClassID.UInt64 :
                {
                    ulong* p;
                    p = (ulong*)array.RealElements;
                    
                    return (double)(*p);
                    
                }

                case ClassID.Int64 :
                {
                    long* p;
                    p = (long*)array.RealElements;
                    
                    return (double)(*p);
                    
                }

                case ClassID.Single :
                {
                    float* p;
                    p = (float*)array.RealElements;
                    
                    return (double)(*p);
                    
                }

                case ClassID.Double :
                {
                    double* p;
                    p = (double*)array.RealElements;
                    
                    return *p;
                    
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "double"));
            }
        }
        
        public unsafe static double[] _ToDoubleArray1D(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            ClassID classId = array.Class;
        		double[] result = new double[count];
        		
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (double)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (double)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (double)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (double)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (double)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (double)(*p++);
                        
                    }
                    break;
                }

                case ClassID.UInt64 :
                {
                    ulong* p;
                    p = (ulong*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (double)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Int64 :
                {
                    long* p;
                    p = (long*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (double)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Single :
                {
                    float* p;
                    p = (float*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = (double)(*p++);
                        
                    }
                    break;
                }

                case ClassID.Double :
                {
                    double* p;
                    p = (double*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        
                        result[i] = *p++;
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "double"));
            }
            
            return result;
        }
        
        public unsafe static Array _ToDoubleArray(MxArray array)
        {
            if (array == null) throw new ArgumentNullException("array");
            int count = array.NumberOfElements;
            int[] dims = array.Dimensions;
            Array result = Array.CreateInstance(typeof(double), dims);
            ClassID classId = array.Class;
        		
        		int[] coords;
            switch(classId)
            {
                
                case ClassID.UInt8 :
                {
                    byte* p;
                    p = (byte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((double)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int8 :
                {
                    sbyte* p;
                    p = (sbyte*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((double)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt16 :
                {
                    ushort* p;
                    p = (ushort*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((double)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int16 :
                {
                    short* p;
                    p = (short*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((double)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt32 :
                {
                    uint* p;
                    p = (uint*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((double)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int32 :
                {
                    int* p;
                    p = (int*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((double)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.UInt64 :
                {
                    ulong* p;
                    p = (ulong*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((double)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Int64 :
                {
                    long* p;
                    p = (long*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((double)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Single :
                {
                    float* p;
                    p = (float*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue((double)(*p++), coords);
                        
                    }
                    break;
                }

                case ClassID.Double :
                {
                    double* p;
                    p = (double*)array.RealElements;
                    for(int i = 0 ; i < count; i++)
                    {
                        coords = MxUtils.CoordinatesFromIndex(i, dims);
                        
                        result.SetValue(*p++, coords);
                        
                    }
                    break;
                }

                default:
                    throw new Exception(string.Format(NO_WAY_TO_CAST, classId, "double"));
            }
            
            return result;
        }
        
        #endregion


        static Object _ToDotNetType(MxArray array, ClassID classId, int ndims)
        {
             Object result = null;
             switch(classId)
             {
                 
                 case ClassID.Char :
                     if (ndims == 1)
                     {
                         result = _ToChar(array);
                     }
                     else
                     {
                         result = _ToCharArray(array);
                     }
                     break;

                 case ClassID.Logical :
                     if (ndims == 1)
                     {
                         result = _ToBoolean(array);
                     }
                     else
                     {
                         result = _ToBooleanArray(array);
                     }
                     break;

                 case ClassID.Int8 :
                     if (ndims == 1)
                     {
                         result = _ToSByte(array);
                     }
                     else
                     {
                         result = _ToSByteArray(array);
                     }
                     break;

                 case ClassID.UInt8 :
                     if (ndims == 1)
                     {
                         result = _ToByte(array);
                     }
                     else
                     {
                         result = _ToByteArray(array);
                     }
                     break;

                 case ClassID.UInt16 :
                     if (ndims == 1)
                     {
                         result = _ToUInt16(array);
                     }
                     else
                     {
                         result = _ToUInt16Array(array);
                     }
                     break;

                 case ClassID.Int16 :
                     if (ndims == 1)
                     {
                         result = _ToInt16(array);
                     }
                     else
                     {
                         result = _ToInt16Array(array);
                     }
                     break;

                 case ClassID.UInt32 :
                     if (ndims == 1)
                     {
                         result = _ToUInt32(array);
                     }
                     else
                     {
                         result = _ToUInt32Array(array);
                     }
                     break;

                 case ClassID.Int32 :
                     if (ndims == 1)
                     {
                         result = _ToInt32(array);
                     }
                     else
                     {
                         result = _ToInt32Array(array);
                     }
                     break;

                 case ClassID.UInt64 :
                     if (ndims == 1)
                     {
                         result = _ToUInt64(array);
                     }
                     else
                     {
                         result = _ToUInt64Array(array);
                     }
                     break;

                 case ClassID.Int64 :
                     if (ndims == 1)
                     {
                         result = _ToInt64(array);
                     }
                     else
                     {
                         result = _ToInt64Array(array);
                     }
                     break;

                 case ClassID.Single :
                     if (ndims == 1)
                     {
                         result = _ToSingle(array);
                     }
                     else
                     {
                         result = _ToSingleArray(array);
                     }
                     break;

                 case ClassID.Double :
                     if (ndims == 1)
                     {
                         result = _ToDouble(array);
                     }
                     else
                     {
                         result = _ToDoubleArray(array);
                     }
                     break;

             }
             return result;
        }       
    }
}
